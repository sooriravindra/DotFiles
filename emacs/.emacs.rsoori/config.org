#+TITLE: Emacs Configuration
#+AUTHOR: Raveendra Soori
#+CREATED: 7th April 2023

* Early init
** Garbage collector trick
#+begin_src emacs-lisp :tangle early-init.el
  ;; Garbage collector trick to speed up init
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)
  (add-hook 'after-init-hook #'(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold (* 16 1024 1024)
                                       gc-cons-percentage 0.1)))
#+end_src

** Setup frame elements
#+begin_src emacs-lisp :tangle early-init.el
  ;; Preventing frame resize saves some time
  (setq frame-inhibit-implied-resize t)

  ;; Set font size and dracula theme's bg color to prevent flicker
  (set-face-attribute 'default nil
                      :foreground "#ffffff"
                      :background "#282a36"
                      :height 200)

  ;; Show column number in mode-line
  (column-number-mode)

  ;; Don't show startup page
  (setq-default inhibit-startup-message t
                frame-title-format '("EvilEmacs - %b"))

  ;; Hide scrollbar, toolbar, menubar and tool tips
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
#+end_src

** Mode line setup
#+begin_src emacs-lisp :tangle early-init.el

  (defun rs/mode-line-format (left right)
    "Return a string of `window-width' length.
     Containing LEFT, and RIGHT aligned respectively."
    (let ((available-width (- (window-width) (length left) 1)))
      (format (format "%%s %%%ds " available-width) left right)))

  (defun rs/formatted-evil-state ()
    "Return the evil state of current buffer with first letter capitalized."
    (concat " " (upcase (substring (symbol-name evil-state) 0 1))
            (substring (symbol-name evil-state) 1) " ") )

  (defface evil-mode-line-face '((t (:foreground  "black"
                                                  :background "orange")))
    "Face for evil state in mode-line.")

  (setq-default
   mode-line-format
   '((:eval (rs/mode-line-format
             ;; left portion
             (format-mode-line
              (quote ("%e"
                      (:eval
                       (when (bound-and-true-p evil-local-mode)
                         (let ((formatted-state (rs/formatted-evil-state)))
                           (if (and (fboundp 'mode-line-window-selected-p)
                                    (mode-line-window-selected-p))
                               (propertize formatted-state
                                           'face 'evil-mode-line-face)
                             (propertize formatted-state)))))
                      " " (:eval (when (buffer-modified-p) "[+]"))
                      " " mode-line-buffer-identification
                      " %l:%c")))
             ;; right portion
             (format-mode-line (quote ("%m " (vc-mode vc-mode))))))))
#+end_src

* Generic config
** Convenient constants
#+begin_src emacs-lisp
  (defconst EMACS27+ (not (version< emacs-version "27")))
  (defconst EMACS28+ (not (version< emacs-version "28")))
 #+end_src
 
** Conditionally load early-init.el
 #+begin_src emacs-lisp

  ;; load early-init.el in earlier versions and on initial tangling
  (when (or (not EMACS27+)
            (not rs/early-init-exists))
    (load (concat user-emacs-directory "early-init.el")))
 #+end_src

** Global keybindings
 #+begin_src emacs-lisp
   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   ;; C-u is used to scroll, use C-M-u as alternative for universal argument
   (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Global default variables
#+begin_src emacs-lisp
   (setq-default native-comp-async-report-warnings-errors nil
                 indent-tabs-mode nil
                 use-package-always-ensure t
                 create-lockfiles nil
                 visible-bell t
                 make-backup-files nil
                 confirm-kill-emacs #'y-or-n-p
                 find-file-visit-truename t)
#+end_src

** Use y/n instead of yes/no
#+begin_src emacs-lisp
   (if EMACS28+ (setq-default use-short-answers t)
     (fset 'yes-or-no-p 'y-or-n-p))
#+end_src

** Prompt for Gpg password in minibuffer
#+begin_src emacs-lisp
   (set (if EMACS27+ 'epg-pinentry-mode 'epa-pinentry-mode) 'loopback)
#+end_src

** Default modes
#+begin_src emacs-lisp
  (show-paren-mode 1)
  (winner-mode 1)
  (global-visual-line-mode 1)
  ;; Display line numbers only in programming modes
  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
#+end_src

* use-package setup
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  ;; Add melpa and elpa devel (required for compat-28.x)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa-devel" . "https://elpa.gnu.org/devel/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

#+end_src

* Packages
** Cleanliness
#+begin_src emacs-lisp
  ;; Keep things organized
  (use-package no-littering
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** Org
#+begin_src emacs-lisp
  (use-package org
    :config
    (dolist (face '((org-document-title . 1.8)
                    (org-level-1 . 1.5)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil
                          :weight 'regular :height (cdr face)))
    (setq org-hide-emphasis-markers t)
    :hook (org-mode . org-indent-mode)
    :defer t)

  ;; Fancier bullets for org mode
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; UI for org-roam
  (use-package org-roam-ui
    :defer t)

  ;; Make src blocks in html output mimmick the buffer
  (use-package htmlize
    :defer t)

#+end_src

** Evil
#+begin_src emacs-lisp
  ;; Vim you shall
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-symbol-word-search t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-undo-system 'undo-redo)
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    ;; Make <ctrl><space> leader in all modes
    (evil-set-leader nil (kbd "C-SPC"))
    ;; In addition, make <space> leader in normal and visual mode.
    (evil-set-leader '(normal visual) (kbd "SPC"))
    ;; Local leader is <leader> m
    (evil-set-leader nil (kbd "<leader> m") t)
    (evil-ex-define-cmd "bw[ipeout]" 'kill-this-buffer)
    (evil-ex-define-cmd "smile" 'zone))

  ;; Load leader key bindings
  (load-file rs/bindings-file)

  ;; Morreee Vim
  (use-package evil-collection
    :after evil
    :config
    ;; Fix <SPC> as leader in evil-collection
    (defun fix-leader-translations (_mode mode-keymaps &rest _rest)
      (evil-collection-translate-key 'normal mode-keymaps
        (kbd "SPC") (kbd "C-SPC")))
    (add-hook 'evil-collection-setup-hook #'fix-leader-translations)
    (evil-collection-init))

  ;; Snipe 'em
  (use-package evil-snipe
    :config (evil-snipe-mode 1))

  ;; Commenting
  (use-package evil-commentary
    :config (evil-commentary-mode 1))

  ;; Use gs to make jumps
  (use-package evil-easymotion
    :config (evilem-default-keybindings "gs"))

  (use-package evil-matchit
    :config (global-evil-matchit-mode 1))

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode))
#+end_src

** Completion
#+begin_src emacs-lisp
  ;; Completion system
  (use-package vertico
    :init (vertico-mode)
    :config
    (setq vertico-posframe-parameters
          '((left-fringe . 20)
            (right-fringe . 20)))
    (setq vertico-cycle t))

  ;; Display vertico in posframe
  (use-package vertico-posframe
    :config (vertico-posframe-mode 1))

  ;; Orderless completion style
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  ;; Commands that make use of completion
  (use-package consult
    :init
    (setq completion-in-region-function
          (lambda (&rest args)
            (apply (if vertico-mode
                       #'consult-completion-in-region
                     #'completion--in-region)
                   args)))
    :defer t)

  ;; Add annotations to minibuffer completion
  (use-package marginalia
    :bind
    (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

#+end_src

** Code completion
#+begin_src emacs-lisp
  ;; Text completion framework
  (use-package company
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<return>" . nil)
                ("RET" . nil)
                ("<tab>" . company-complete-selection)))

  ;; LSP client
  (use-package eglot
    :hook ((python-mode c++-mode c-mode) . eglot-ensure)
    :config
    (setq eglot-autoshutdown t)
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
    (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio"))))
#+end_src

** UI
#+begin_src emacs-lisp
  ;; Themes
  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

  (use-package all-the-icons
    :defer t)

  ;; Show possible keys and bindings
  (use-package which-key
    :config (which-key-mode))

  ;; Frame wide text scaling
  (use-package default-text-scale
    :config (default-text-scale-mode 1))

  ;; Highlight cursor
  (use-package beacon
    :defer t)

  ;; Cat in the modeline
  (use-package nyan-mode
    :defer t)

#+end_src

** Git
#+begin_src emacs-lisp
  ;; Apparently the best git interface
  (use-package magit
    :config
    (define-key magit-mode-map (kbd "SPC") 'rs/send-leader)
    :bind ("C-x g" . magit-status))

  ;; Git gutter
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap
      'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap
      'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap
      'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src

** Better help
#+begin_src emacs-lisp
  ;; Better help
  (use-package helpful
    :defer t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Terminal
#+begin_src emacs-lisp
  ;; The most loved terminal in Emacs
  (use-package vterm
    :if (eq system-type `gnu/linux)
    :defer t)

#+end_src

** Fuzzy finder
#+begin_src emacs-lisp
  ;; Fuzzy finder
  (use-package affe
    :init
    (setq affe-find-command (concat "rg"
                                    " --color=never"
                                    " --no-ignore"
                                    " --hidden"
                                    " --files"))
    (setq affe-grep-command (concat "rg"
                                    "--null"
                                    " --color=never"
                                    " --max-columns=1000"
                                    " --no-heading"
                                    " --line-number"
                                    " --no-ignore"
                                    " --hidden"
                                    " -v ^$"))
    :defer t)

  ;; Also include FZF
  (use-package fzf
    :defer t)

#+end_src

** PDF support
#+begin_src emacs-lisp
  (use-package pdf-tools
    :if (eq system-type `gnu/linux)
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :defer t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))

  ;; Custom functions

#+end_src

** Others
#+begin_src emacs-lisp
  ;; Profiler
  (use-package esup
    :defer t
    :pin melpa
    :config (setq esup-depth 0))

  ;; Async support
  (use-package async
    :defer t)

  ;; Save command history
  (use-package savehist
    :config (savehist-mode t))

  ;; Show keyboard input
  (use-package command-log-mode
    :defer t
    :commands command-log-mode)

  ;; Handy command to restart
  (use-package restart-emacs
    :defer t)

  ;; Still editing vim config files?
  (use-package vimrc-mode
    :defer t)

#+end_src

* Leader bindings
The table below is used to generate the leader key bindings.

#+NAME: bindings-table
|-----+------------------------------------+------------------------|
| Key | Function                           | Description            |
|-----+------------------------------------+------------------------|
| ;   | execute-extended-command           | M-x                    |
| .   | find-file                          | Find file              |
| /   | evil-commentary-line               | Commentary             |
| :   | pp-eval-expression                 | Evaluate expression    |
| b   |                                    | Buffer/bookmark        |
| bb  | consult-buffer                     | Switch buffer/bookmark |
| bm  | bookmark-set                       | Set bookmark           |
| bw  | kill-this-buffer                   | Kill buffer            |
| bn  | evil-next-buffer                   | Next buffer            |
| bp  | evil-prev-buffer                   | Previous buffer        |
| bl  | evil-switch-to-windows-last-buffer | Last buffer            |
| g   |                                    | Git                    |
| gg  | magit-status                       | Magit status           |
| gj  | git-gutter:next-hunk               | Next git hunk          |
| gk  | git-gutter:previous-hunk           | Prev git hunk          |
| h   | rs/help                            | +Help                  |
| r   |                                    | Org-roam               |
| rf  | org-roam-node-find                 | Find node              |
| ri  | org-roam-node-insert               | Insert node            |
| rs  | org-roam-db-sync                   | DB sync                |
| rl  | org-roam-update-org-id-locations   | Update roam org id     |
| ru  | org-roam-ui-mode                   | Org roam ui            |
| w   |                                    | Window                 |
| wo  | delete-other-windows               | Only window            |
| wq  | evil-quit                          | Close window           |
| ww  | evil-window-next                   | Next window            |
| wW  | evil-window-prev                   | Previous window        |
| wh  | evil-window-left                   | Window left            |
| wj  | evil-window-down                   | Window down            |
| wk  | evil-window-up                     | Window up              |
| wl  | evil-window-right                  | Window right           |
| ws  | evil-window-split                  | Horizontal split       |
| wv  | evil-window-vsplit                 | Vertical split         |
| wu  | winner-undo                        | Winner undo            |
| wU  | winner-redo                        | Winner redo            |
|-----+------------------------------------+------------------------|

#+name: gen-bindings-src
#+begin_src emacs-lisp :tangle no :results value file :file bindings.el :var table=bindings-table
  (let ((evilmap "")
        (wkmap "")
        (wkadd "which-key-add-key-based-replacements"))
    (progn
      (cl-loop for row in (cdr table)
               for desc = (nth 2 row)
               for func = (nth 1 row)
               for keys = (car row)
               do (if (eq func "")
                      (setq wkmap
                            (concat wkmap
                                    (format "\n(%s \"SPC %s\" \"%s\")"
                                            wkadd keys desc)
                                    (format "\n(%s \"C-SPC %s\" \"%s\")"
                                            wkadd keys desc)))
                    (setq evilmap
                          (concat evilmap
                                  (format "\n(kbd \"<leader> %s\") '(\"%s\" . %s)"
                                          keys desc func)))))
      (concat (format "(evil-define-key nil 'global %s )\n" evilmap)
              wkmap)))
#+end_src

* Helper functions

#+begin_src emacs-lisp
  (defun rs/gen-input(KEYS)
    "Generates the input key sequence from kbd compatible string KEYS."
    (interactive)
    (setq  unread-command-events
           (nconc (listify-key-sequence (kbd KEYS)) unread-command-events)))

  (defun rs/help ()
    (interactive)
    (rs/gen-input "C-h"))

  (defun rs/send-leader ()
    (interactive)
    (rs/gen-input "C-SPC"))

#+end_src

* Zen UI

#+begin_src emacs-lisp

    ;; Hide modeline
    (use-package hide-mode-line
      :defer t)

    ;; Distraction free writing
    (use-package olivetti
      :defer t)

    (defun rs/zen--get-mode-state (mode)
      "Returns t if MODE is set to non-nil else returns -1"
      (if (boundp mode) (if (eq (eval mode) nil) -1 t) -1))

    (defun rs/toggle-zen (&optional arg)
      "Zen for intense focus"
      (interactive "P")
      (let ((arg (or arg 0)))
        ;; Check if we need to turn off zen
        (if (and (<= arg 0) (boundp 'rs/zen-restore-line-num))
            (progn
              (display-line-numbers-mode rs/zen-restore-line-num)
              (hide-mode-line-mode rs/zen-restore-mode-line)
              (olivetti-mode -1)
              (kill-local-variable 'rs/zen-restore-line-num)
              (kill-local-variable 'rs/zen-restore-mode-line))
          (if (and (not (boundp 'rs/zen-restore-line-num))
                   (not (boundp 'rs/zen-restore-mode-line))
                   (>= arg 0))
              (progn
                (make-local-variable 'rs/zen-restore-line-num)
                (setq rs/zen-restore-line-num
                      (rs/zen--get-mode-state 'display-line-numbers-mode))
                (make-local-variable 'rs/zen-restore-mode-line)
                (setq rs/zen-restore-mode-line
                      (rs/zen--get-mode-state 'hide-mode-line-mode))
                (display-line-numbers-mode 0)
                (hide-mode-line-mode t)
                (olivetti-mode t))))))
#+end_src

* In the end
** Load custom settings

#+begin_src emacs-lisp

  (when (file-exists-p custom-file)
    (load-file custom-file))

#+end_src
